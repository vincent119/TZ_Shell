#!/bin/bash
##################################
#         Public  funtcion
#      careted by 20110304
#      script by  vinent.yu
#      changed 20110316 by vincent.yu
#      changed 20111006 by vincent.yu     
####################################
WLOG(){
  LOGPATH=$1
  LOGTXT=$2
  
  DATETIMEQ=`date +"%Y%m%d %H:%M:%S"`
  printf "%-s\n" "$DATETIMEQ: $LOGTXT" >> $LOGPATH



}
GET_PUBINF_IP(){
DPATH="/opt/SYS_script/PUBLIC_LIB/CONFIG"
LIST=`ls $DPATH/`
for i in $LIST
do
  cd $DPATH/$i
  LIST2=`ls $DPATH/$i/`
  for x in $LIST2
    do
      IP_V=`cat $x |grep IPADDR |awk -F= '{print $2}'`
    done
done
}
GET_HOST_CONIF(){
  DPATH="/opt/SYS_script/PUBLIC_LIB/CONFIG"
  HOSTCONFIG=`find $DPATH -name $HOSTNAME.inf`
  if [ ${#HOSTCONFIG} -eq 0 ];then
     printf "%-80s\n"  "|-----------------------------------------------------------------------------|"
     printf "%-80s\n"  "|                          -Error Massage-                                    |"
     printf "%-80s\n"  "|              Cna not found out $HOSTNAME.inf                               |"
     printf "%-80s\n"  "|              Check config Please                                            |"
     printf "%-80s\n"  "|-----------------------------------------------------------------------------|"
     exit 0;
  fi
  if [ ! -f $HOSTCONFIG ];then
     printf "%-80s\n"  "|-----------------------------------------------------------------------------|"
     printf "%-80s\n"  "|                          -Error Massage-                                    |"
     printf "%-80s\n"  "|              Cna not found out $HOSTNAME.inf                               |"
     printf "%-80s\n"  "|              Check config Please                                            |"
     printf "%-80s\n"  "|-----------------------------------------------------------------------------|"
     exit 0;
  else
     . $HOSTCONFIG
  fi

}
GET_HOST_ROUTE(){
  DPATH="/opt/SYS_script/PUBLIC_LIB/ROUTE"
  HOSTCONFIG=`find $DPATH -name $HOSTNAME.ROUTE`
  if [ ${#HOSTCONFIG} -eq 0 ];then
     printf "%-80s\n"  "|-----------------------------------------------------------------------------|"
     printf "%-80s\n"  "|                          -Error Massage-                                    |"
     printf "%-80s\n"  "|              Can not found out $HOSTNAME.ROUTE                           |"
     printf "%-80s\n"  "|              Check config Please                                            |"
     printf "%-80s\n"  "|-----------------------------------------------------------------------------|"
     exit 0;
  fi
  if [ ! -f $HOSTCONFIG ];then
     printf "%-80s\n"  "|-----------------------------------------------------------------------------|"
     printf "%-80s\n"  "|                          -Error Massage-                                    |"
     printf "%-80s\n"  "|              Can not found out $HOSTNAME.ROUTE                           |"
     printf "%-80s\n"  "|              Check config Please                                            |"
     printf "%-80s\n"  "|-----------------------------------------------------------------------------|"
     exit 0;
  else
     GET_HOST_ROUTE=$HOSTCONFIG
  fi
}

F_STOP_JBOSS(){
   SPJBOSS=$1
   for SPJF in $SPJBOSS
   do
        JPIDN=`ps aux |grep $SPJF |grep org.jboss.Main | awk '{print $2}' | wc -l`
        if [ $JPIDN != "0" ];then
          cd $JBOSSHOME/$SPJF
          ./shutdown.sh
          for (( c=30; c>=1; c-- ))
          do 
           clear
            printf "%80s\n" "|------------------------------------------------------------------|"
            printf "%80s\n" " JBOSS service  $SPJF   shutdown now, waiting $c sec    ............"
            printf "%80s\n" "|------------------------------------------------------------------|"
            sleep 1
          done
          JPIDN=`ps aux |grep $SPJF |grep org.jboss.Main | awk '{print $2}' | wc -l` 
          if [ $JPIDN -gt 2 ];then
            JPID=`ps aux |grep $SPJF |grep org.jboss.Main | awk '{print $2}'`
            kill -9 $JPID           
          fi
        fi
   done 
}

F_START_JBOSS(){
  STJBOSS=$1
  for j in $STJBOSS
   do
        JPID=` ps aux |grep $j |grep org.jboss.Main | awk '{print $2}'|wc -l`
        if [ $JPID != "0" ];then
          JPID=` ps aux |grep $j |grep org.jboss.Main | awk '{print $2}'`
          clear
          printf "%80s\n" "|------------------------------------------------------------------|"
          printf "%80s\n"  " JBOSS service  $j   ( PID $JPID ) running already ................"
          printf "%80s\n"  " Check please	.............................. ................"
          printf "%80s\n" "|------------------------------------------------------------------|"
  	else
          cd $JBOSSHOME/$j
          ./run.sh
          sleep 3
          clear 
          JPID=` ps aux |grep $j |grep org.jboss.Main | awk '{print $2}'` 
          printf "%80s\n" "|------------------------------------------------------------------|"
          printf "%80s\n"  " JBOSS service  $j   ( PID $JPID ) running now ...................."
          printf "%80s\n" "|------------------------------------------------------------------|"
 	fi
   done
}

BACKUP_SERVICE(){
 NAME_SERVICE=$1
 DATE=`date +"%Y%m%d"`
 TIME=`date +"%H%M"`
 if [ ! -d  $BACKUP_DIR/$NAME_SERVICE/$DATE ];then
     mkdir -p $BACKUP_DIR/$NAME_SERVICE/$DATE
 fi
 cp -p -r $JBOSSHOME/$NAME_SERVICE $BACKUP_DIR/$NAME_SERVICE/$DATE/$NAME_SERVICE-$DATE-$TIME
 clear 
 printf "%80s\n" "|------------------------------------------------------------------|"
 printf "%80s\n"  " backup $NAME_SERVICE  finished  !!!!          ...................."
 printf "%80s\n"  " backup folder $BACKUP_DIR/$NAME_SERVICE/$DATE/$NAME_SERVICE-$DATE-$TIME ."
 printf "%80s\n" "|------------------------------------------------------------------|"
 sleep 3
}

CLEAN_FILE(){
  CLEAN_SER_N=$*
  LISTCOUNT=` ls $BACKUP_DIR/$CLEAN_SER_N |wc -l`

  if [ $LISTCOUNT -gt $LIMIT_BACKUP ];then
    LIST=`ls $BACKUP_DIR/$CLEAN_SER_N`
    ARRAYINDEX="0"
    ######################################
    for i in $LIST
    do
      ARRAYLIST[$ARRAYINDEX]=$i
      ARRAYINDEX=`expr $ARRAYINDEX + 1`
    done
    DIFFCOUNT=$(( $LISTCOUNT - ( $LIMIT_BACKUP + 1 )))
    WCOUNT=0
  ########################################
    while [ $WCOUNT -lt $DIFFCOUNT ]
    do
      DIRNAME=${ARRAYLIST[$WCOUNT]}
      rm -rf  $BACKUP_DIR/$CLEAN_SER_N/$DIRNAME
      WCOUNT=`expr $WCOUNT + 1`
    done
  fi
}
